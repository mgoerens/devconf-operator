diff --git a/Dockerfile b/Dockerfile
index b078298..22fa021 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -15,6 +15,7 @@ RUN go mod download
 COPY cmd/main.go cmd/main.go
 COPY api/ api/
 COPY internal/controller/ internal/controller/
+COPY internal/resources/ internal/resources/
 
 # Build
 # the GOARCH has not a default value to allow the binary be built according to the host where the command
diff --git a/internal/controller/recipe_controller.go b/internal/controller/recipe_controller.go
index 72c9d42..72b4bc5 100644
--- a/internal/controller/recipe_controller.go
+++ b/internal/controller/recipe_controller.go
@@ -19,15 +19,19 @@ package controller
 import (
 	"context"
 
+	appsv1 "k8s.io/api/apps/v1"
+	corev1 "k8s.io/api/core/v1"
+	apierrors "k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/runtime"
 	ctrl "sigs.k8s.io/controller-runtime"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 	"sigs.k8s.io/controller-runtime/pkg/log"
 
 	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	resources "github.com/opdev/devconf-operator/internal/resources"
 )
 
-// RecipeReconciler reconciles a Recipe object
+// recipeReconciler reconciles a recipe object
 type RecipeReconciler struct {
 	client.Client
 	Scheme *runtime.Scheme
@@ -36,11 +40,15 @@ type RecipeReconciler struct {
 //+kubebuilder:rbac:groups=devconfcz.opdev.com,resources=recipes,verbs=get;list;watch;create;update;patch;delete
 //+kubebuilder:rbac:groups=devconfcz.opdev.com,resources=recipes/status,verbs=get;update;patch
 //+kubebuilder:rbac:groups=devconfcz.opdev.com,resources=recipes/finalizers,verbs=update
+//+kubebuilder:rbac:groups=apps,resources=deployments;replicasets,verbs=*
+//+kubebuilder:rbac:groups=monitoring.coreos.com,resources=prometheuses;servicemonitors;prometheusrule,verbs=*
+//+kubebuilder:rbac:groups=autoscaling,resources=horizontalpodautoscalers,verbs=get;list;watch;create;update;patch;delete
+//+kubebuilder:rbac:groups="",resources=configmaps;endpoints;events;persistentvolumeclaims;pods;namespaces;secrets;serviceaccounts;services;services/finalizers,verbs=*
 
 // Reconcile is part of the main kubernetes reconciliation loop which aims to
 // move the current state of the cluster closer to the desired state.
 // TODO(user): Modify the Reconcile function to compare the state specified by
-// the Recipe object against the actual cluster state, and then
+// the recipe object against the actual cluster state, and then
 // perform operations to make the cluster state reflect the state specified by
 // the user.
 //
@@ -48,8 +56,227 @@ type RecipeReconciler struct {
 // - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.16.3/pkg/reconcile
 func (r *RecipeReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
 	_ = log.FromContext(ctx)
+	log := log.FromContext(ctx)
 
-	// TODO(user): your logic here
+	// get an instance of the recipe object
+	recipe := &devconfczv1alpha1.Recipe{}
+	err := r.Get(ctx, req.NamespacedName, recipe)
+	if err != nil {
+		if apierrors.IsNotFound(err) {
+			// If the custom resource is not found then, it usually means that it was deleted or not created
+			// In this way, we will stop the reconciliation
+			log.Info("recipe resource not found. Ignoring since object must be deleted")
+			return ctrl.Result{}, nil
+		}
+		// Error reading the object - requeue the request.
+		log.Error(err, "Failed to get recipe")
+		return ctrl.Result{}, err
+	}
+	// Define a new ConfigMap object for initdbconfigmap mysql database
+	mysqlInitDBConfigMap, err := resources.MySQLInitDBConfigMapForrecipe(recipe, r.Scheme)
+	if err != nil {
+		return ctrl.Result{}, err
+	}
+	// Check if the InitDB ConfigMap already exists
+	foundMysqlInitDBConfigMap := &corev1.ConfigMap{}
+	err = r.Get(ctx, client.ObjectKey{Name: mysqlInitDBConfigMap.Name, Namespace: mysqlInitDBConfigMap.Namespace}, foundMysqlInitDBConfigMap)
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new ConfigMap for mysql database initialization")
+		err = r.Create(ctx, mysqlInitDBConfigMap)
+		if err != nil {
+			log.Error(err, "Failed to create new ConfigMap for mysql database initialization", "ConfigMap.Namespace", mysqlInitDBConfigMap.Namespace, "ConfigMap.Name", mysqlInitDBConfigMap.Name)
+			return ctrl.Result{}, err
+		}
+		// ConfigMap created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get ConfigMap for mysql database initialization")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new ConfigMap object for mysql database
+	mysqlConfigMap, err := resources.MySQLConfigMapForrecipe(recipe, r.Scheme)
+	if err != nil {
+		return ctrl.Result{}, err
+	}
+	// Check if the ConfigMap already exists
+	foundMySQLConfigMap := &corev1.ConfigMap{}
+	err = r.Get(ctx, client.ObjectKey{Name: mysqlConfigMap.Name, Namespace: mysqlConfigMap.Namespace}, foundMySQLConfigMap)
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new MySQL ConfigMap", "ConfigMap.Namespace", mysqlConfigMap.Namespace, "ConfigMap.Name", mysqlConfigMap.Name)
+		err = r.Create(ctx, mysqlConfigMap)
+		if err != nil {
+			log.Error(err, "Failed to create new MySQL ConfigMap", "ConfigMap.Namespace", mysqlConfigMap.Namespace, "ConfigMap.Name", mysqlConfigMap.Name)
+			return ctrl.Result{}, err
+		}
+	} else if err != nil {
+		log.Error(err, "Failed to get MySQL ConfigMap")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new service object for recipe application
+	service, err := resources.RecipeServiceForrecipe(recipe, r.Scheme)
+	if err != nil {
+		log.Error(err, "Failed to define new service resource for recipe application")
+		return ctrl.Result{}, err
+	}
+	// Check if the service already exists
+	foundService := &corev1.Service{}
+	err = r.Get(ctx, client.ObjectKey{Name: service.Name, Namespace: service.Namespace}, foundService)
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new service for recipe application")
+		err = r.Create(ctx, service)
+		if err != nil {
+			log.Error(err, "Failed to create new service for recipe application", "Service.Namespace", service.Namespace, "Service.Name", service.Name)
+			return ctrl.Result{}, err
+		}
+		// Service created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get service")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new service object for mysql database
+	service, err = resources.MySQLServiceForrecipe(recipe, r.Scheme)
+	if err != nil {
+		log.Error(err, "Failed to define new service resource for mysql database")
+		return ctrl.Result{}, err
+	}
+	// Check if the service already exists
+	foundService = &corev1.Service{}
+	err = r.Get(ctx, client.ObjectKey{Name: service.Name, Namespace: service.Namespace}, foundService)
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new service resource for mysql database")
+		err = r.Create(ctx, service)
+		if err != nil {
+			log.Error(err, "Failed to create new service for mysql database", "Service.Namespace", service.Namespace, "Service.Name", service.Name)
+			return ctrl.Result{}, err
+		}
+		// Service created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get service for mysql database")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new persistent volume claim object
+	pvc, err := resources.PersistentVolumeClaimForrecipe(recipe, r.Scheme)
+	if err != nil {
+		log.Error(err, "Failed to define PVC for recipe")
+		return ctrl.Result{}, err
+	}
+	// Check if the PVC already exists
+	foundPVC := &corev1.PersistentVolumeClaim{}
+	err = r.Get(ctx, client.ObjectKey{Name: pvc.Name, Namespace: pvc.Namespace}, foundPVC)
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new PVC")
+		err = r.Create(ctx, pvc)
+		if err != nil {
+			log.Error(err, "Failed to create new PVC", "PVC.Namespace", pvc.Namespace, "PVC.Name", pvc.Name)
+			return ctrl.Result{}, err
+		}
+		// PVC created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get PVC")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new mysql database Deployment object
+	dep, err := resources.MysqlDeploymentForrecipe(recipe, r.Scheme)
+	if err != nil {
+		log.Error(err, "Failed to define new mysql deployment resource for recipe")
+		return ctrl.Result{}, err
+	}
+
+	// Check if the Mysql database Deployment already exists
+	found := &appsv1.Deployment{}
+	err = r.Get(ctx, client.ObjectKey{Name: dep.Name, Namespace: dep.Namespace}, found)
+	if err != nil && apierrors.IsNotFound(err) {
+		// Update status for MySQL Deployment
+		recipe.Status.MySQLStatus = "Creating..."
+		log.Info("Creating a new mysql database deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+		err = r.Create(ctx, dep)
+		if err != nil {
+			log.Error(err, "Failed to create new mysql database deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+
+			// Update status for MySQL Deployment
+			recipe.Status.MySQLStatus = "Created"
+			err = r.Status().Update(ctx, recipe)
+			if err != nil {
+				log.Error(err, "Failed to update recipe status")
+				return ctrl.Result{}, err
+			}
+
+			return ctrl.Result{}, err
+		}
+		// Deployment created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get mysql database deployment")
+		// Update status for MySQL Deployment
+		recipe.Status.MySQLStatus = "Failed"
+		return ctrl.Result{}, err
+	}
+	// mysql database Deployment already exists - don't requeue
+	log.Info("Skip reconcile: mysql database deployment already exists", "Deployment.Namespace", found.Namespace, "Deployment.Name", found.Name)
+
+	// Define a new recipe app deployment object
+	dep, err = resources.DeploymentForRecipeApp(recipe, r.Scheme)
+	if err != nil {
+		log.Error(err, "Failed to define new Deployment resource for recipe")
+		return ctrl.Result{}, err
+	}
+
+	// Check if the Deployment already exists
+	found = &appsv1.Deployment{}
+	err = r.Get(ctx, client.ObjectKey{Name: dep.Name, Namespace: dep.Namespace}, found)
+	if err != nil && apierrors.IsNotFound(err) {
+
+		log.Info("Creating a new Deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+		err = r.Create(ctx, dep)
+		if err != nil {
+			log.Error(err, "Failed to create new Deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+
+			// Update status for Recipe App Deployment
+			recipe.Status.RecipeAppStatus = "Created"
+			err = r.Status().Update(ctx, recipe)
+			if err != nil {
+				log.Error(err, "Failed to update recipe status")
+				return ctrl.Result{}, err
+			}
+
+			return ctrl.Result{}, err
+		}
+		// Deployment created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get Deployment")
+		return ctrl.Result{}, err
+	} else if *found.Spec.Replicas != recipe.Spec.Count {
+		// Update the Recipe deployment if the number of replicas does not match the desired state
+		log.Info("Updating Recipe Deployment replicas", "Current", *found.Spec.Replicas, "Desired", recipe.Spec.Count)
+		found.Spec.Replicas = &recipe.Spec.Count
+		err = r.Update(ctx, found)
+		if err != nil {
+			log.Error(err, "Failed to update Recipe Deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+			return ctrl.Result{}, err
+		}
+	}
+
+	// Update status for MySQL Deployment
+	recipe.Status.MySQLStatus = "Created"
+	// Update status for Recipe App Deployment
+	recipe.Status.RecipeAppStatus = "Created"
+	err = r.Status().Update(ctx, recipe)
+	if err != nil {
+		log.Error(err, "Failed to update recipe status")
+		return ctrl.Result{}, err
+	}
+
+	// If the Deployment already exists and the size is the same, then do nothing
+	log.Info("Skip reconcile: Deployment already exists", "Deployment.Namespace", found.Namespace, "Deployment.Name", found.Name)
 
 	return ctrl.Result{}, nil
 }
@@ -58,5 +285,6 @@ func (r *RecipeReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctr
 func (r *RecipeReconciler) SetupWithManager(mgr ctrl.Manager) error {
 	return ctrl.NewControllerManagedBy(mgr).
 		For(&devconfczv1alpha1.Recipe{}).
+		Owns(&appsv1.Deployment{}).
 		Complete(r)
 }
diff --git a/internal/resources/configmap.go b/internal/resources/configmap.go
new file mode 100644
index 0000000..b82ac75
--- /dev/null
+++ b/internal/resources/configmap.go
@@ -0,0 +1,55 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	ctrl "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
+)
+
+// MySQLConfigMapForrecipe creates a ConfigMap for MySQL configuration
+func MySQLConfigMapForrecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.ConfigMap, error) {
+	configMap := &corev1.ConfigMap{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      "mysql-config",
+			Namespace: recipe.Namespace,
+		},
+		Data: map[string]string{
+			"DB_HOST":             "mysql",
+			"DB_PORT":             "3306",
+			"MYSQL_DATABASE":      "recipes",
+			"MYSQL_USER":          "recipeuser",
+			"MYSQL_PASSWORD":      "recipepassword",
+			"MYSQL_ROOT_PASSWORD": "rootpassword",
+		},
+	}
+
+	if err := ctrl.SetControllerReference(recipe, configMap, scheme); err != nil {
+		return nil, err
+	}
+
+	return configMap, nil
+}
+
+// MySQLInitDBConfigMapForrecipe creates a ConfigMap for MySQL initialization
+func MySQLInitDBConfigMapForrecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.ConfigMap, error) {
+	configMap := &corev1.ConfigMap{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      "mysql-initdb-config",
+			Namespace: recipe.Namespace,
+		},
+		Data: map[string]string{
+			"initdb.sql": `
+				CREATE USER IF NOT EXISTS 'recipeuser'@'%' IDENTIFIED BY 'recipepassword';
+				GRANT ALL PRIVILEGES ON recipes.* TO 'recipeuser'@'%';
+				FLUSH PRIVILEGES;`,
+		},
+	}
+
+	if err := ctrl.SetControllerReference(recipe, configMap, scheme); err != nil {
+		return nil, err
+	}
+
+	return configMap, nil
+}
diff --git a/internal/resources/deployment.go b/internal/resources/deployment.go
new file mode 100644
index 0000000..d94f9b3
--- /dev/null
+++ b/internal/resources/deployment.go
@@ -0,0 +1,127 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	appsv1 "k8s.io/api/apps/v1"
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	ctrl "sigs.k8s.io/controller-runtime"
+)
+
+func DeploymentForRecipeApp(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*appsv1.Deployment, error) {
+
+	replicas := recipe.Spec.Count
+	version := recipe.Spec.Version
+	image := "quay.io/opdev/recipe_app:" + version
+
+	dep := &appsv1.Deployment{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      recipe.Name,
+			Namespace: recipe.Namespace,
+		},
+		Spec: appsv1.DeploymentSpec{
+			Replicas: &replicas,
+			Selector: &metav1.LabelSelector{
+				MatchLabels: map[string]string{
+					"app": "recipe-app",
+				},
+			},
+			Template: corev1.PodTemplateSpec{
+				ObjectMeta: metav1.ObjectMeta{
+					Labels: map[string]string{
+						"app": "recipe-app",
+					},
+				},
+				Spec: corev1.PodSpec{
+					SecurityContext: &corev1.PodSecurityContext{
+						RunAsNonRoot: &[]bool{true}[0],
+						SeccompProfile: &corev1.SeccompProfile{
+							Type: corev1.SeccompProfileTypeRuntimeDefault,
+						},
+					},
+					Containers: []corev1.Container{{
+						Image:           image,
+						Name:            "recipe-app",
+						ImagePullPolicy: corev1.PullIfNotPresent,
+						Ports: []corev1.ContainerPort{
+							{
+								ContainerPort: 5000,
+								Name:          "http",
+							},
+						},
+						Env: []corev1.EnvVar{
+							{
+								Name: "DB_HOST",
+								ValueFrom: &corev1.EnvVarSource{
+									ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: "mysql-config",
+										},
+										Key: "DB_HOST",
+									},
+								},
+							},
+							{
+								Name: "DB_PORT",
+								ValueFrom: &corev1.EnvVarSource{
+									ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: "mysql-config",
+										},
+										Key: "DB_PORT",
+									},
+								},
+							},
+							{
+								Name: "DB_NAME",
+								ValueFrom: &corev1.EnvVarSource{
+									ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: "mysql-config",
+										},
+										Key: "MYSQL_DATABASE",
+									},
+								},
+							},
+							{
+								Name:  "DB_USER",
+								Value: "recipeuser",
+							},
+							{
+								Name: "DB_PASSWORD",
+								ValueFrom: &corev1.EnvVarSource{
+									ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: "mysql-config",
+										},
+										Key: "MYSQL_PASSWORD",
+									},
+								},
+							},
+						},
+						SecurityContext: &corev1.SecurityContext{
+							// WARNING: Ensure that the image used defines an UserID in the Dockerfile
+							// otherwise the Pod will not run and will fail with `container has runAsNonRoot and image has non-numeric user`.
+							// If you want your workloads admitted in namespaces enforced with the restricted mode in OpenShift/OKD vendors
+							// then, you MUST ensure that the Dockerfile defines a User ID OR you MUST leave the `RunAsNonRoot` and
+							// RunAsUser fields empty.
+							RunAsNonRoot:             &[]bool{true}[0],
+							AllowPrivilegeEscalation: &[]bool{false}[0],
+							Capabilities: &corev1.Capabilities{
+								Drop: []corev1.Capability{
+									"ALL",
+								},
+							},
+						},
+					}},
+				},
+			},
+		},
+	}
+	// Set the ownerRef for the Deployment
+	if err := ctrl.SetControllerReference(recipe, dep, scheme); err != nil {
+		return nil, err
+	}
+	return dep, nil
+}
diff --git a/internal/resources/mysqldeployment.go b/internal/resources/mysqldeployment.go
new file mode 100644
index 0000000..614eeac
--- /dev/null
+++ b/internal/resources/mysqldeployment.go
@@ -0,0 +1,120 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	appsv1 "k8s.io/api/apps/v1"
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	ctrl "sigs.k8s.io/controller-runtime"
+)
+
+func MysqlDeploymentForrecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*appsv1.Deployment, error) {
+
+	replicas := int32(1)
+	dep := &appsv1.Deployment{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      "mysql-deployment",
+			Namespace: recipe.Namespace,
+		},
+		Spec: appsv1.DeploymentSpec{
+			Replicas: &replicas,
+			Selector: &metav1.LabelSelector{
+				MatchLabels: map[string]string{
+					"app": "mysql",
+				},
+			},
+			Template: corev1.PodTemplateSpec{
+				ObjectMeta: metav1.ObjectMeta{
+					Labels: map[string]string{
+						"app": "mysql",
+					},
+				},
+				Spec: corev1.PodSpec{
+					SecurityContext: &corev1.PodSecurityContext{
+						RunAsNonRoot: &[]bool{true}[0],
+						SeccompProfile: &corev1.SeccompProfile{
+							Type: corev1.SeccompProfileTypeRuntimeDefault,
+						},
+					},
+					Containers: []corev1.Container{{
+						Image:           "image-registry.openshift-image-registry.svc:5000/openshift/mysql@sha256:8e9a6595ac9aec17c62933d3b5ecc78df8174a6c2ff74c7f602235b9aef0a340",
+						Name:            "mysql",
+						ImagePullPolicy: corev1.PullIfNotPresent,
+						Ports: []corev1.ContainerPort{
+							{
+								ContainerPort: 3306,
+							},
+						},
+						Env: []corev1.EnvVar{
+							{
+								Name:  "MYSQL_ROOT_PASSWORD",
+								Value: "rootpassword",
+							},
+							{
+								Name:  "MYSQL_DATABASE",
+								Value: "recipes",
+							},
+							{
+								Name:  "MYSQL_PASSWORD",
+								Value: "recipepassword",
+							},
+							{
+								Name:  "MYSQL_USER",
+								Value: "recipeuser",
+							},
+						},
+						VolumeMounts: []corev1.VolumeMount{
+							{
+								Name:      "mysql-persistent-storage",
+								MountPath: "/var/lib/mysql",
+							},
+							{
+								Name:      "mysql-initdb",
+								MountPath: "/docker-entrypoint-initdb.d",
+							},
+						},
+						SecurityContext: &corev1.SecurityContext{
+							// WARNING: Ensure that the image used defines an UserID in the Dockerfile
+							// otherwise the Pod will not run and will fail with `container has runAsNonRoot and image has non-numeric user`.
+							// If you want your workloads admitted in namespaces enforced with the restricted mode in OpenShift/OKD vendors
+							// then, you MUST ensure that the Dockerfile defines a User ID OR you MUST leave the `RunAsNonRoot` and
+							// RunAsUser fields empty.
+							RunAsNonRoot:             &[]bool{true}[0],
+							AllowPrivilegeEscalation: &[]bool{false}[0],
+							Capabilities: &corev1.Capabilities{
+								Drop: []corev1.Capability{
+									"ALL",
+								},
+							},
+						},
+					}},
+					Volumes: []corev1.Volume{
+						{
+							Name: "mysql-persistent-storage",
+							VolumeSource: corev1.VolumeSource{
+								PersistentVolumeClaim: &corev1.PersistentVolumeClaimVolumeSource{
+									ClaimName: "mysql",
+								},
+							},
+						},
+						{Name: "mysql-initdb",
+							VolumeSource: corev1.VolumeSource{
+								ConfigMap: &corev1.ConfigMapVolumeSource{
+									LocalObjectReference: corev1.LocalObjectReference{
+										Name: "mysql-initdb-config",
+									},
+								},
+							},
+						},
+					},
+				},
+			},
+		},
+	}
+	// Set the ownerRef for the Deployment
+	if err := ctrl.SetControllerReference(recipe, dep, scheme); err != nil {
+		return nil, err
+	}
+	return dep, nil
+}
diff --git a/internal/resources/pvc.go b/internal/resources/pvc.go
new file mode 100644
index 0000000..ae579f4
--- /dev/null
+++ b/internal/resources/pvc.go
@@ -0,0 +1,37 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	corev1 "k8s.io/api/core/v1"
+	"k8s.io/apimachinery/pkg/api/resource"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	ctrl "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
+)
+
+// PersistentVolumeClaimForrecipe creates a PVC for MySQL and sets the owner reference
+func PersistentVolumeClaimForrecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.PersistentVolumeClaim, error) {
+	pvc := &corev1.PersistentVolumeClaim{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      "mysql",
+			Namespace: recipe.Namespace,
+		},
+		Spec: corev1.PersistentVolumeClaimSpec{
+			AccessModes: []corev1.PersistentVolumeAccessMode{
+				corev1.ReadWriteOnce,
+			},
+			Resources: corev1.ResourceRequirements{
+				Requests: corev1.ResourceList{
+					corev1.ResourceStorage: resource.MustParse("1Gi"),
+				},
+			},
+		},
+	}
+
+	// Set owner reference
+	if err := ctrl.SetControllerReference(recipe, pvc, scheme); err != nil {
+		return nil, err
+	}
+
+	return pvc, nil
+}
diff --git a/internal/resources/service.go b/internal/resources/service.go
new file mode 100644
index 0000000..662adf0
--- /dev/null
+++ b/internal/resources/service.go
@@ -0,0 +1,66 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	"k8s.io/apimachinery/pkg/util/intstr"
+	ctrl "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
+)
+
+// MySQLServiceForrecipe creates a Service for the MySQL Deployment and sets the owner reference
+func MySQLServiceForrecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.Service, error) {
+	service := &corev1.Service{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      "mysql",
+			Namespace: recipe.Namespace,
+		},
+		Spec: corev1.ServiceSpec{
+			Ports: []corev1.ServicePort{
+				{
+					Port: 3306,
+				},
+			},
+			Selector: map[string]string{
+				"app": "mysql",
+			},
+		},
+	}
+
+	// Set owner reference
+	if err := ctrl.SetControllerReference(recipe, service, scheme); err != nil {
+		return nil, err
+	}
+
+	return service, nil
+}
+
+// RecipeServiceForrecipe creates a Service for the Recipe application and sets the owner reference
+func RecipeServiceForrecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.Service, error) {
+	service := &corev1.Service{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      "recipe-app-service",
+			Namespace: recipe.Namespace,
+		},
+		Spec: corev1.ServiceSpec{
+			Selector: map[string]string{
+				"app": "recipe-app",
+			},
+			Ports: []corev1.ServicePort{
+				{
+					Protocol:   corev1.ProtocolTCP,
+					Port:       80,
+					TargetPort: intstr.FromInt(5000),
+				},
+			},
+		},
+	}
+
+	// Set owner reference
+	if err := ctrl.SetControllerReference(recipe, service, scheme); err != nil {
+		return nil, err
+	}
+
+	return service, nil
+}
