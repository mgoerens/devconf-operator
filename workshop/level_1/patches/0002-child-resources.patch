diff --git a/Dockerfile b/Dockerfile
index b078298..22fa021 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -15,6 +15,7 @@ RUN go mod download
 COPY cmd/main.go cmd/main.go
 COPY api/ api/
 COPY internal/controller/ internal/controller/
+COPY internal/resources/ internal/resources/
 
 # Build
 # the GOARCH has not a default value to allow the binary be built according to the host where the command
diff --git a/internal/controller/recipe_controller.go b/internal/controller/recipe_controller.go
index 72c9d42..945cfc4 100644
--- a/internal/controller/recipe_controller.go
+++ b/internal/controller/recipe_controller.go
@@ -19,12 +19,16 @@ package controller
 import (
 	"context"
 
+	appsv1 "k8s.io/api/apps/v1"
+	corev1 "k8s.io/api/core/v1"
+	apierrors "k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/runtime"
 	ctrl "sigs.k8s.io/controller-runtime"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 	"sigs.k8s.io/controller-runtime/pkg/log"
 
 	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	resources "github.com/opdev/devconf-operator/internal/resources"
 )
 
 // RecipeReconciler reconciles a Recipe object
@@ -36,6 +40,8 @@ type RecipeReconciler struct {
 //+kubebuilder:rbac:groups=devconfcz.opdev.com,resources=recipes,verbs=get;list;watch;create;update;patch;delete
 //+kubebuilder:rbac:groups=devconfcz.opdev.com,resources=recipes/status,verbs=get;update;patch
 //+kubebuilder:rbac:groups=devconfcz.opdev.com,resources=recipes/finalizers,verbs=update
+//+kubebuilder:rbac:groups=apps,resources=deployments;replicasets,verbs=*
+//+kubebuilder:rbac:groups="",resources=configmaps;endpoints;events;persistentvolumeclaims;pods;namespaces;secrets;serviceaccounts;services;services/finalizers,verbs=*
 
 // Reconcile is part of the main kubernetes reconciliation loop which aims to
 // move the current state of the cluster closer to the desired state.
@@ -48,8 +54,240 @@ type RecipeReconciler struct {
 // - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.16.3/pkg/reconcile
 func (r *RecipeReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
 	_ = log.FromContext(ctx)
+	log := log.FromContext(ctx)
 
-	// TODO(user): your logic here
+	// get an instance of the recipe object
+	recipe := &devconfczv1alpha1.Recipe{}
+	err := r.Get(ctx, req.NamespacedName, recipe)
+	if err != nil {
+		if apierrors.IsNotFound(err) {
+			// If the custom resource is not found then, it usually means that it was deleted or not created
+			// In this way, we will stop the reconciliation
+			log.Info("recipe resource not found. Ignoring since object must be deleted")
+			return ctrl.Result{}, nil
+		}
+		// Error reading the object - requeue the request.
+		log.Error(err, "Failed to get recipe")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new ConfigMap object for initdbconfigmap mysql database
+	mysqlInitDBConfigMap, err := resources.MySQLInitDBConfigMapForRecipe(recipe, r.Scheme)
+	if err != nil {
+		return ctrl.Result{}, err
+	}
+	// Check if the InitDB ConfigMap already exists
+	err = r.Get(ctx, client.ObjectKey{Name: mysqlInitDBConfigMap.Name, Namespace: mysqlInitDBConfigMap.Namespace}, &corev1.ConfigMap{})
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new ConfigMap for mysql database initialization")
+		err = r.Create(ctx, mysqlInitDBConfigMap)
+		if err != nil {
+			log.Error(err, "Failed to create new ConfigMap for mysql database initialization", "ConfigMap.Namespace", mysqlInitDBConfigMap.Namespace, "ConfigMap.Name", mysqlInitDBConfigMap.Name)
+			return ctrl.Result{}, err
+		}
+		// ConfigMap created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get ConfigMap for mysql database initialization")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new ConfigMap object for mysql database
+	mysqlConfigMap, err := resources.MySQLConfigMapForRecipe(recipe, r.Scheme)
+	if err != nil {
+		return ctrl.Result{}, err
+	}
+	// Check if the ConfigMap already exists
+	err = r.Get(ctx, client.ObjectKey{Name: mysqlConfigMap.Name, Namespace: mysqlConfigMap.Namespace}, &corev1.ConfigMap{})
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new MySQL ConfigMap", "ConfigMap.Namespace", mysqlConfigMap.Namespace, "ConfigMap.Name", mysqlConfigMap.Name)
+		err = r.Create(ctx, mysqlConfigMap)
+		if err != nil {
+			log.Error(err, "Failed to create new MySQL ConfigMap", "ConfigMap.Namespace", mysqlConfigMap.Namespace, "ConfigMap.Name", mysqlConfigMap.Name)
+			return ctrl.Result{}, err
+		}
+	} else if err != nil {
+		log.Error(err, "Failed to get MySQL ConfigMap")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new Secret object for mysql database
+	mysqlSecret, err := resources.MySQLSecretForRecipe(recipe, r.Scheme)
+	if err != nil {
+		return ctrl.Result{}, err
+	}
+	// Check if the Secret already exists
+	err = r.Get(ctx, client.ObjectKey{Name: mysqlSecret.Name, Namespace: mysqlSecret.Namespace}, &corev1.Secret{})
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new Secret for mysql")
+		err = r.Create(ctx, mysqlSecret)
+		if err != nil {
+			log.Error(err, "Failed to create new Secret for mysql database initialization", "Secret.Namespace", mysqlSecret.Namespace, "Secret.Name", mysqlSecret.Name)
+			return ctrl.Result{}, err
+		}
+		// Secret created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get Secret for mysql database initialization")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new service object for recipe application
+	service, err := resources.RecipeServiceForRecipe(recipe, r.Scheme)
+	if err != nil {
+		log.Error(err, "Failed to define new service resource for recipe application")
+		return ctrl.Result{}, err
+	}
+	// Check if the service already exists
+	err = r.Get(ctx, client.ObjectKey{Name: service.Name, Namespace: service.Namespace}, &corev1.Service{})
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new service for recipe application")
+		err = r.Create(ctx, service)
+		if err != nil {
+			log.Error(err, "Failed to create new service for recipe application", "Service.Namespace", service.Namespace, "Service.Name", service.Name)
+			return ctrl.Result{}, err
+		}
+		// Service created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get service")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new service object for mysql database
+	service, err = resources.MySQLServiceForRecipe(recipe, r.Scheme)
+	if err != nil {
+		log.Error(err, "Failed to define new service resource for mysql database")
+		return ctrl.Result{}, err
+	}
+	// Check if the service already exists
+	err = r.Get(ctx, client.ObjectKey{Name: service.Name, Namespace: service.Namespace}, &corev1.Service{})
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new service resource for mysql database")
+		err = r.Create(ctx, service)
+		if err != nil {
+			log.Error(err, "Failed to create new service for mysql database", "Service.Namespace", service.Namespace, "Service.Name", service.Name)
+			return ctrl.Result{}, err
+		}
+		// Service created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get service for mysql database")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new persistent volume claim object
+	pvc, err := resources.PersistentVolumeClaimForRecipe(recipe, r.Scheme)
+	if err != nil {
+		log.Error(err, "Failed to define PVC for recipe")
+		return ctrl.Result{}, err
+	}
+	// Check if the PVC already exists
+	err = r.Get(ctx, client.ObjectKey{Name: pvc.Name, Namespace: pvc.Namespace}, &corev1.PersistentVolumeClaim{})
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new PVC")
+		err = r.Create(ctx, pvc)
+		if err != nil {
+			log.Error(err, "Failed to create new PVC", "PVC.Namespace", pvc.Namespace, "PVC.Name", pvc.Name)
+			return ctrl.Result{}, err
+		}
+		// PVC created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get PVC")
+		return ctrl.Result{}, err
+	}
+
+	// Define a new mysql database Deployment object
+	dep, err := resources.MysqlDeploymentForRecipe(recipe, r.Scheme)
+	if err != nil {
+		log.Error(err, "Failed to define new mysql deployment resource for recipe")
+		return ctrl.Result{}, err
+	}
+
+	// Check if the Mysql database Deployment already exists
+	err = r.Get(ctx, client.ObjectKey{Name: dep.Name, Namespace: dep.Namespace}, &appsv1.Deployment{})
+	if err != nil && apierrors.IsNotFound(err) {
+		// Update status for MySQL Deployment
+		recipe.Status.MySQLStatus = "Creating..."
+		log.Info("Creating a new mysql database deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+		err = r.Create(ctx, dep)
+		if err != nil {
+			log.Error(err, "Failed to create new mysql database deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+
+			// Update status for MySQL Deployment
+			recipe.Status.MySQLStatus = "Created"
+			err = r.Status().Update(ctx, recipe)
+			if err != nil {
+				log.Error(err, "Failed to update recipe status")
+				return ctrl.Result{}, err
+			}
+
+			return ctrl.Result{}, err
+		}
+		// Deployment created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get mysql database deployment")
+		// Update status for MySQL Deployment
+		recipe.Status.MySQLStatus = "Failed"
+		return ctrl.Result{}, err
+	}
+
+	// Define a new recipe app deployment object
+	dep, err = resources.DeploymentForRecipe(recipe, r.Scheme)
+	if err != nil {
+		log.Error(err, "Failed to define new Deployment resource for recipe")
+		return ctrl.Result{}, err
+	}
+
+	// Check if the Deployment already exists
+	found := &appsv1.Deployment{}
+	err = r.Get(ctx, client.ObjectKey{Name: dep.Name, Namespace: dep.Namespace}, found)
+	if err != nil && apierrors.IsNotFound(err) {
+		log.Info("Creating a new Deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+		err = r.Create(ctx, dep)
+		if err != nil {
+			log.Error(err, "Failed to create new Deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+
+			// Update status for Recipe App Deployment
+			recipe.Status.RecipeAppStatus = "Created"
+			err = r.Status().Update(ctx, recipe)
+			if err != nil {
+				log.Error(err, "Failed to update recipe status")
+				return ctrl.Result{}, err
+			}
+
+			return ctrl.Result{}, err
+		}
+		// Deployment created successfully - return and requeue
+		return ctrl.Result{Requeue: true}, nil
+	} else if err != nil {
+		log.Error(err, "Failed to get Deployment")
+		return ctrl.Result{}, err
+	} else if *found.Spec.Replicas != recipe.Spec.Replicas {
+		// Update the Recipe deployment if the number of replicas does not match the desired state
+		log.Info("Updating Recipe Deployment replicas", "Current", *found.Spec.Replicas, "Desired", recipe.Spec.Replicas)
+		found.Spec.Replicas = &recipe.Spec.Replicas
+		err = r.Update(ctx, found)
+		if err != nil {
+			log.Error(err, "Failed to update Recipe Deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+			return ctrl.Result{}, err
+		}
+	}
+
+	// If the Deployment already exists and the size is the same, then do nothing
+	log.Info("Skip reconcile: Deployment already exists", "Deployment.Namespace", found.Namespace, "Deployment.Name", found.Name)
+
+	// Update status for MySQL Deployment
+	recipe.Status.MySQLStatus = "Created"
+	// Update status for Recipe App Deployment
+	recipe.Status.RecipeAppStatus = "Created"
+	err = r.Status().Update(ctx, recipe)
+	if err != nil {
+		log.Error(err, "Failed to update recipe status")
+		return ctrl.Result{}, err
+	}
 
 	return ctrl.Result{}, nil
 }
@@ -58,5 +296,10 @@ func (r *RecipeReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctr
 func (r *RecipeReconciler) SetupWithManager(mgr ctrl.Manager) error {
 	return ctrl.NewControllerManagedBy(mgr).
 		For(&devconfczv1alpha1.Recipe{}).
+		Owns(&appsv1.Deployment{}).
+		Owns(&corev1.ConfigMap{}).
+		Owns(&corev1.PersistentVolumeClaim{}).
+		Owns(&appsv1.Secret{}).
+		Owns(&appsv1.Service{}).
 		Complete(r)
 }
diff --git a/internal/resources/configmap.go b/internal/resources/configmap.go
new file mode 100644
index 0000000..87c49c1
--- /dev/null
+++ b/internal/resources/configmap.go
@@ -0,0 +1,53 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	ctrl "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
+)
+
+// MySQLConfigMapForRecipe creates a ConfigMap for MySQL configuration
+func MySQLConfigMapForRecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.ConfigMap, error) {
+	configMap := &corev1.ConfigMap{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      recipe.Name + "-mysql-config",
+			Namespace: recipe.Namespace,
+		},
+		Data: map[string]string{
+			"DB_HOST":        recipe.Name + "-mysql",
+			"DB_PORT":        "3306",
+			"MYSQL_DATABASE": "recipes",
+			"MYSQL_USER":     "recipeuser",
+		},
+	}
+
+	if err := ctrl.SetControllerReference(recipe, configMap, scheme); err != nil {
+		return nil, err
+	}
+
+	return configMap, nil
+}
+
+// MySQLInitDBConfigMapForRecipe creates a ConfigMap for MySQL initialization
+func MySQLInitDBConfigMapForRecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.ConfigMap, error) {
+	configMap := &corev1.ConfigMap{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      recipe.Name + "-mysql-initdb-config",
+			Namespace: recipe.Namespace,
+		},
+		Data: map[string]string{
+			"initdb.sql": `
+				CREATE USER IF NOT EXISTS 'recipeuser'@'%' IDENTIFIED BY 'recipepassword';
+				GRANT ALL PRIVILEGES ON recipes.* TO 'recipeuser'@'%';
+				FLUSH PRIVILEGES;`,
+		},
+	}
+
+	if err := ctrl.SetControllerReference(recipe, configMap, scheme); err != nil {
+		return nil, err
+	}
+
+	return configMap, nil
+}
diff --git a/internal/resources/deployment.go b/internal/resources/deployment.go
new file mode 100644
index 0000000..b54c5ea
--- /dev/null
+++ b/internal/resources/deployment.go
@@ -0,0 +1,141 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	appsv1 "k8s.io/api/apps/v1"
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	ctrl "sigs.k8s.io/controller-runtime"
+)
+
+var deployPodSecContext = corev1.PodSecurityContext{
+	RunAsNonRoot: &[]bool{true}[0],
+	SeccompProfile: &corev1.SeccompProfile{
+		Type: corev1.SeccompProfileTypeRuntimeDefault,
+	},
+}
+
+var deploySecContext = &corev1.SecurityContext{
+	// WARNING: Ensure that the image used defines an UserID in the Dockerfile
+	// otherwise the Pod will not run and will fail with `container has runAsNonRoot and image has non-numeric user`.
+	// If you want your workloads admitted in namespaces enforced with the restricted mode in OpenShift/OKD vendors
+	// then, you MUST ensure that the Dockerfile defines a User ID OR you MUST leave the `RunAsNonRoot` and
+	// RunAsUser fields empty.
+	RunAsNonRoot:             &[]bool{true}[0],
+	AllowPrivilegeEscalation: &[]bool{false}[0],
+	Capabilities: &corev1.Capabilities{
+		Drop: []corev1.Capability{
+			"ALL",
+		},
+	},
+}
+
+func DeploymentForRecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*appsv1.Deployment, error) {
+	if recipe.Spec.PodSecurityContext != nil {
+		deployPodSecContext = *recipe.Spec.PodSecurityContext
+	}
+
+	if recipe.Spec.SecurityContext != nil {
+		deploySecContext = recipe.Spec.SecurityContext
+	}
+
+	replicas := recipe.Spec.Replicas
+	version := recipe.Spec.Version
+	image := "quay.io/opdev/recipe_app:" + version
+
+	dep := &appsv1.Deployment{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      recipe.Name,
+			Namespace: recipe.Namespace,
+		},
+		Spec: appsv1.DeploymentSpec{
+			Replicas: &replicas,
+			Selector: &metav1.LabelSelector{
+				MatchLabels: map[string]string{
+					"app": recipe.Name,
+				},
+			},
+			Template: corev1.PodTemplateSpec{
+				ObjectMeta: metav1.ObjectMeta{
+					Labels: map[string]string{
+						"app": recipe.Name,
+					},
+				},
+				Spec: corev1.PodSpec{
+					SecurityContext: &deployPodSecContext,
+					Containers: []corev1.Container{{
+						Image:           image,
+						Name:            "recipe-app",
+						ImagePullPolicy: corev1.PullIfNotPresent,
+						Ports: []corev1.ContainerPort{
+							{
+								ContainerPort: 5000,
+								Name:          "http",
+							},
+						},
+						Env: []corev1.EnvVar{
+							{
+								Name: "DB_HOST",
+								ValueFrom: &corev1.EnvVarSource{
+									ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: recipe.Name + "-mysql-config",
+										},
+										Key: "DB_HOST",
+									},
+								},
+							}, {
+								Name: "DB_PORT",
+								ValueFrom: &corev1.EnvVarSource{
+									ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: recipe.Name + "-mysql-config",
+										},
+										Key: "DB_PORT",
+									},
+								},
+							}, {
+								Name: "DB_NAME",
+								ValueFrom: &corev1.EnvVarSource{
+									ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: recipe.Name + "-mysql-config",
+										},
+										Key: "MYSQL_DATABASE",
+									},
+								},
+							}, {
+								Name: "DB_USER",
+								ValueFrom: &corev1.EnvVarSource{
+									ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: recipe.Name + "-mysql-config",
+										},
+										Key: "MYSQL_USER",
+									},
+								},
+							}, {
+								Name: "DB_PASSWORD",
+								ValueFrom: &corev1.EnvVarSource{
+									SecretKeyRef: &corev1.SecretKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: recipe.Name + "-mysql",
+										},
+										Key: "MYSQL_PASSWORD",
+									},
+								},
+							},
+						},
+						SecurityContext: deploySecContext,
+					}},
+				},
+			},
+		},
+	}
+	// Set the ownerRef for the Deployment
+	if err := ctrl.SetControllerReference(recipe, dep, scheme); err != nil {
+		return nil, err
+	}
+	return dep, nil
+}
diff --git a/internal/resources/mysqldeployment.go b/internal/resources/mysqldeployment.go
new file mode 100644
index 0000000..e0f5886
--- /dev/null
+++ b/internal/resources/mysqldeployment.go
@@ -0,0 +1,162 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	appsv1 "k8s.io/api/apps/v1"
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	ctrl "sigs.k8s.io/controller-runtime"
+)
+
+var podSecContext = corev1.PodSecurityContext{
+	RunAsNonRoot: &[]bool{true}[0],
+	SeccompProfile: &corev1.SeccompProfile{
+		Type: corev1.SeccompProfileTypeRuntimeDefault,
+	},
+}
+
+var secContext = &corev1.SecurityContext{
+	// WARNING: Ensure that the image used defines an UserID in the Dockerfile
+	// otherwise the Pod will not run and will fail with `container has runAsNonRoot and image has non-numeric user`.
+	// If you want your workloads admitted in namespaces enforced with the restricted mode in OpenShift/OKD vendors
+	// then, you MUST ensure that the Dockerfile defines a User ID OR you MUST leave the `RunAsNonRoot` and
+	// RunAsUser fields empty.
+	RunAsNonRoot:             &[]bool{true}[0],
+	AllowPrivilegeEscalation: &[]bool{false}[0],
+	Capabilities: &corev1.Capabilities{
+		Drop: []corev1.Capability{
+			"ALL",
+		},
+	},
+}
+
+var databaseImage = "image-registry.openshift-image-registry.svc:5000/openshift/mysql@sha256:8e9a6595ac9aec17c62933d3b5ecc78df8174a6c2ff74c7f602235b9aef0a340"
+
+func MysqlDeploymentForRecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*appsv1.Deployment, error) {
+	if recipe.Spec.Database.PodSecurityContext != nil {
+		podSecContext = *recipe.Spec.Database.PodSecurityContext
+	}
+	if recipe.Spec.Database.SecurityContext != nil {
+		secContext = recipe.Spec.Database.SecurityContext
+	}
+	if recipe.Spec.Database.Image != "" {
+		databaseImage = recipe.Spec.Database.Image
+	}
+	replicas := int32(1)
+	dep := &appsv1.Deployment{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      recipe.Name + "-mysql",
+			Namespace: recipe.Namespace,
+		},
+		Spec: appsv1.DeploymentSpec{
+			Replicas: &replicas,
+			Selector: &metav1.LabelSelector{
+				MatchLabels: map[string]string{
+					"app": recipe.Name + "-mysql",
+				},
+			},
+			Template: corev1.PodTemplateSpec{
+				ObjectMeta: metav1.ObjectMeta{
+					Labels: map[string]string{
+						"app": recipe.Name + "-mysql",
+					},
+				},
+				Spec: corev1.PodSpec{
+					SecurityContext: &podSecContext,
+					Containers: []corev1.Container{{
+						Image: databaseImage,
+						Name:  "mysql",
+						Args: []string{
+							"--ignore-db-dir=lost+found",
+						},
+						ImagePullPolicy: corev1.PullIfNotPresent,
+						Ports: []corev1.ContainerPort{
+							{
+								ContainerPort: 3306,
+							},
+						},
+						Env: []corev1.EnvVar{
+							{
+								Name: "MYSQL_DATABASE",
+								ValueFrom: &corev1.EnvVarSource{
+									ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: recipe.Name + "-mysql-config",
+										},
+										Key: "MYSQL_DATABASE",
+									},
+								},
+							}, {
+								Name: "MYSQL_USER",
+								ValueFrom: &corev1.EnvVarSource{
+									ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: recipe.Name + "-mysql-config",
+										},
+										Key: "MYSQL_USER",
+									},
+								},
+							}, {
+								Name: "MYSQL_PASSWORD",
+								ValueFrom: &corev1.EnvVarSource{
+									SecretKeyRef: &corev1.SecretKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: recipe.Name + "-mysql",
+										},
+										Key: "MYSQL_PASSWORD",
+									},
+								},
+							}, {
+								Name: "MYSQL_ROOT_PASSWORD",
+								ValueFrom: &corev1.EnvVarSource{
+									SecretKeyRef: &corev1.SecretKeySelector{
+										LocalObjectReference: corev1.LocalObjectReference{
+											Name: recipe.Name + "-mysql",
+										},
+										Key: "MYSQL_ROOT_PASSWORD",
+									},
+								},
+							},
+						},
+						VolumeMounts: []corev1.VolumeMount{
+							{
+								Name:      "mysql-persistent-storage",
+								MountPath: "/var/lib/mysql",
+							},
+							{
+								Name:      "mysql-initdb",
+								MountPath: "/docker-entrypoint-initdb.d",
+							},
+						},
+						SecurityContext: secContext,
+					}},
+					Volumes: []corev1.Volume{
+						{
+							Name: "mysql-persistent-storage",
+							VolumeSource: corev1.VolumeSource{
+								PersistentVolumeClaim: &corev1.PersistentVolumeClaimVolumeSource{
+									ClaimName: recipe.Name + "-mysql",
+								},
+							},
+						},
+						{Name: "mysql-initdb",
+							VolumeSource: corev1.VolumeSource{
+								ConfigMap: &corev1.ConfigMapVolumeSource{
+									LocalObjectReference: corev1.LocalObjectReference{
+										Name: recipe.Name + "-mysql-initdb-config",
+									},
+								},
+							},
+						},
+					},
+				},
+			},
+		},
+	}
+	// Set the ownerRef for the Deployment
+	if err := ctrl.SetControllerReference(recipe, dep, scheme); err != nil {
+		return nil, err
+	}
+	return dep, nil
+}
diff --git a/internal/resources/pvc.go b/internal/resources/pvc.go
new file mode 100644
index 0000000..a3ef934
--- /dev/null
+++ b/internal/resources/pvc.go
@@ -0,0 +1,37 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	corev1 "k8s.io/api/core/v1"
+	"k8s.io/apimachinery/pkg/api/resource"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	ctrl "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
+)
+
+// PersistentVolumeClaimForRecipe creates a PVC for MySQL and sets the owner reference
+func PersistentVolumeClaimForRecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.PersistentVolumeClaim, error) {
+	pvc := &corev1.PersistentVolumeClaim{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      recipe.Name + "-mysql",
+			Namespace: recipe.Namespace,
+		},
+		Spec: corev1.PersistentVolumeClaimSpec{
+			AccessModes: []corev1.PersistentVolumeAccessMode{
+				corev1.ReadWriteOnce,
+			},
+			Resources: corev1.ResourceRequirements{
+				Requests: corev1.ResourceList{
+					corev1.ResourceStorage: resource.MustParse("1Gi"),
+				},
+			},
+		},
+	}
+
+	// Set owner reference
+	if err := ctrl.SetControllerReference(recipe, pvc, scheme); err != nil {
+		return nil, err
+	}
+
+	return pvc, nil
+}
diff --git a/internal/resources/secret.go b/internal/resources/secret.go
new file mode 100644
index 0000000..be939ea
--- /dev/null
+++ b/internal/resources/secret.go
@@ -0,0 +1,29 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	ctrl "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
+)
+
+// MySQLSecretForRecipe creates a ConfigMap for MySQL configuration
+func MySQLSecretForRecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.Secret, error) {
+	secret := &corev1.Secret{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      recipe.Name + "-mysql",
+			Namespace: recipe.Namespace,
+		},
+		StringData: map[string]string{
+			"MYSQL_PASSWORD":      "recipepassword",
+			"MYSQL_ROOT_PASSWORD": "rootpassword",
+		},
+	}
+
+	if err := ctrl.SetControllerReference(recipe, secret, scheme); err != nil {
+		return nil, err
+	}
+
+	return secret, nil
+}
diff --git a/internal/resources/service.go b/internal/resources/service.go
new file mode 100644
index 0000000..e159c17
--- /dev/null
+++ b/internal/resources/service.go
@@ -0,0 +1,66 @@
+package resources
+
+import (
+	devconfczv1alpha1 "github.com/opdev/devconf-operator/api/v1alpha1"
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	"k8s.io/apimachinery/pkg/util/intstr"
+	ctrl "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
+)
+
+// MySQLServiceForRecipe creates a Service for the MySQL Deployment and sets the owner reference
+func MySQLServiceForRecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.Service, error) {
+	service := &corev1.Service{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      recipe.Name + "-mysql",
+			Namespace: recipe.Namespace,
+		},
+		Spec: corev1.ServiceSpec{
+			Ports: []corev1.ServicePort{
+				{
+					Port: 3306,
+				},
+			},
+			Selector: map[string]string{
+				"app": recipe.Name + "-mysql",
+			},
+		},
+	}
+
+	// Set owner reference
+	if err := ctrl.SetControllerReference(recipe, service, scheme); err != nil {
+		return nil, err
+	}
+
+	return service, nil
+}
+
+// RecipeServiceForRecipe creates a Service for the Recipe application and sets the owner reference
+func RecipeServiceForRecipe(recipe *devconfczv1alpha1.Recipe, scheme *runtime.Scheme) (*corev1.Service, error) {
+	service := &corev1.Service{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      recipe.Name,
+			Namespace: recipe.Namespace,
+		},
+		Spec: corev1.ServiceSpec{
+			Selector: map[string]string{
+				"app": recipe.Name,
+			},
+			Ports: []corev1.ServicePort{
+				{
+					Protocol:   corev1.ProtocolTCP,
+					Port:       80,
+					TargetPort: intstr.FromInt(5000),
+				},
+			},
+		},
+	}
+
+	// Set owner reference
+	if err := ctrl.SetControllerReference(recipe, service, scheme); err != nil {
+		return nil, err
+	}
+
+	return service, nil
+}
