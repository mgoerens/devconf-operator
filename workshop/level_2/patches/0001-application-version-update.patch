diff --git a/internal/controller/recipe_controller.go b/internal/controller/recipe_controller.go
index 945cfc4..d3b12d9 100644
--- a/internal/controller/recipe_controller.go
+++ b/internal/controller/recipe_controller.go
@@ -18,6 +18,7 @@ package controller
 
 import (
 	"context"
+	"fmt"
 
 	appsv1 "k8s.io/api/apps/v1"
 	corev1 "k8s.io/api/core/v1"
@@ -55,6 +56,7 @@ type RecipeReconciler struct {
 func (r *RecipeReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
 	_ = log.FromContext(ctx)
 	log := log.FromContext(ctx)
+	imagename := "quay.io/opdev/recipe_app"
 
 	// get an instance of the recipe object
 	recipe := &devconfczv1alpha1.Recipe{}
@@ -279,6 +281,27 @@ func (r *RecipeReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctr
 	// If the Deployment already exists and the size is the same, then do nothing
 	log.Info("Skip reconcile: Deployment already exists", "Deployment.Namespace", found.Namespace, "Deployment.Name", found.Name)
 
+	// Level 2: Update Operand (Recipe App)
+	log.Info("Reconciling Recipe App version")
+	found = &appsv1.Deployment{}
+	err = r.Get(ctx, client.ObjectKey{Name: recipe.Name, Namespace: recipe.Namespace}, found)
+
+	if err != nil {
+		log.Error(err, "Failed to get Recipe App Deployment")
+		return ctrl.Result{}, err
+	}
+	desiredImage := fmt.Sprintf("%s:%s", imagename, recipe.Spec.Version)
+	currentImage := found.Spec.Template.Spec.Containers[0].Image
+
+	if currentImage != desiredImage {
+		found.Spec.Template.Spec.Containers[0].Image = desiredImage
+		err = r.Update(ctx, found)
+		if err != nil {
+			log.Error(err, "Failed to update Recipe App version")
+			return ctrl.Result{}, err
+		}
+	}
+
 	// Update status for MySQL Deployment
 	recipe.Status.MySQLStatus = "Created"
 	// Update status for Recipe App Deployment
